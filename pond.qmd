---
title: SIOPS
subtitle: br_ms.siops (v.20240702)
description: |
    Base de dados do sistema SIOPS
  
categories:
  - MS
  - Desid
  - Orçamentos
format: 
  html: 
    page-layout: full
    title-block-style: default
    css: styles.css
filters:
    - shinylive
---
::: {.column-screen-inset}
```{shinylive-python}
#| standalone: true
#| viewerHeight: 800

from typing import List, Optional
from shiny import App, Inputs, Outputs, Session, reactive, render, ui, module
# from htmltools import HTML,li, a
# ============================================================
# toggleButtons module
# ============================================================

@module.ui
def toggleButtons_ui() -> ui.TagChild:
    return ui.output_ui("menu")
    

@module.server
def toggleButtons_server(input: Inputs, output: Outputs, session: Session, choices: List[str], selected=None):
    selected = selected or reactive.value("")
    @render.ui
    def menu():
        buttons = []
        for choice in choices:
            klass = "btn-secondary" if (selected and (selected() == choice)) else "btn-outline-secondary"
            buttons.append(ui.input_action_button(f"menubtn_{choices.index(choice)}", f"{choice}", class_=klass))
        return ui.div(*buttons, class_="d-grid gap-2")

    
    def create_choice_listener(choice, index):
        @reactive.effect
        @reactive.event(getattr(input, f"menubtn_{index}"))
        def listener(): selected.set(choice)
        return listener
    
    for choice in choices:
        create_choice_listener(choice, choices.index(choice))

# ============================================================
# tableShell module
# ============================================================


@module.ui
def tableShell_ui() -> ui.TagChild:
    return ui.output_ui("tableShell")

@module.server
def tableShell_server(input, output, session, selected=None):
    selected = selected or reactive.value("")

    @render.ui
    def tableShell():
        t = f"Tabela: {selected()}"
        panels = ["Baixar", "Explorar", None, None, "Documentação", "Qualidade", "Ficha Técnica", None, None, None, None, None]
        # API, Linhagem
        children = [ui.nav_panel(c, f"Panel {c} content") if c else ui.nav_spacer() for c in panels]
        sb = ui.sidebar("tbl_sb", open="closed", title=t, position="right")
        return ui.navset_card_underline(id="tbl_card", selected="Explorar", sidebar=sb, title=t, *children)

# =============================================================================
# App 
# =============================================================================

panels = [ui.accordion_panel(p, p) for p in ["Entradas/Saídas", "Reúsos", "Discussão"]]

# inout = ui.accordion_panel("Entradas/Saídas", toggleButtons_ui("menuInOut"))
tabelas = ui.accordion_panel("Tabelas", toggleButtons_ui("menuTabelas"))
ficha_tecnica = ui.accordion_panel("Ficha Técnica","Ficha")
accordion = ui.accordion(tabelas, ficha_tecnica)
# accordion2 = ui.accordion(ficha_tecnica)

app_ui = ui.page_sidebar(
    # ui.sidebar( toggleButtons_ui("menuOverview"), accordion1, toggleButtons_ui("menuInOut"), accordion2, id="main_sb", open="open", title="Base: SIOPS", position="left"),
    ui.sidebar( toggleButtons_ui("menuOverview"), accordion,  id="main_sb", open="open", title="Base: SIOPS", position="left"),
    # tableShell_ui(id="table_shell"),
    ui.output_ui("shell"),
    ui.tags.style(".bslib-sidebar-layout > .main { padding: 0px; padding-top: 0px;}"),
    ui.tags.style(".card { --bs-card-border-radius: 0px 0px 8px 0px}"),
)


def server(input, output, session):
    tables = ["Entes", "Receitas", "Despesas"]
    selected = reactive.value(tables[0])    
    # selected = reactive.value("Visão Geral")    
    toggleButtons_server("menuOverview", ["Visão Geral"], selected)
    toggleButtons_server("menuTabelas", tables, selected)
    toggleButtons_server("menuInOut", ["Entradas", "Saídas"], selected)
    tableShell_server(id="table_shell", selected=selected)
    
    @render.ui
    def shell():
        if selected and (selected() in tables): return tableShell_ui(id="table_shell")
        else: return ui.card(  
            ui.card_header(f"{selected()}"),
            ui.p("Card  body"),
            id="visaogeral"
        ), 
        
    # @react.effect
    # @render.ui
    # def shell(id="shell"):
    #     return 
        # else: return "oi"
            # return ui.card(id="base_shell", title="Visão Geral")
    
app = App(app_ui, server)

```

:::
